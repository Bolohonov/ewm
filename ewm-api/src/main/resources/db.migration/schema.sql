CREATE TABLE IF NOT EXISTS users (
 id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
 name VARCHAR(255) NOT NULL,
 firstname VARCHAR(255) NOT NULL,
 lastname VARCHAR(255) NOT NULL,
 email VARCHAR(512) NOT NULL,
 password_hash VARCHAR(255) NOT NULL,
 CONSTRAINT UQ_USER_NAME UNIQUE (name)
);

CREATE TABLE SPRING_SESSION(
    PRIMARY_ID CHAR(36) NOT NULL PRIMARY KEY,
    SESSION_ID CHAR(36) NOT NULL,
    CREATION_TIME BIGINT NOT NULL,
    LAST_ACCESS_TIME BIGINT NOT NULL,
    MAX_INACTIVE_INTERVAL INT NOT NULL,
    EXPIRY_TIME BIGINT NOT NULL,
    PRINCIPAL_NAME VARCHAR(100) DEFAULT NULL,
    UNIQUE KEY SPRING_SESSION_IX1 (SESSION_ID),
    KEY SPRING_SESSION_IX2 (EXPIRY_TIME),
    KEY SPRING_SESSION_IX3 (PRINCIPAL_NAME)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;


CREATE TABLE SPRING_SESSION_ATTRIBUTES(
    SESSION_PRIMARY_ID CHAR(36) NOT NULL,
    ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
    ATTRIBUTE_BYTES BLOB NOT NULL,
    PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
    CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION (PRIMARY_ID) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;

CREATE TABLE tokens (
    id BIGINT(20) NOT NULL PRIMARY KEY AUTO_INCREMENT,
    token_value VARCHAR(255) NOT NULL,
    token_validity BOOLEAN,
    user_id BIGINT(20),
    CONSTRAINT fk_user_token FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE IF NOT EXISTS categories (
  id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL UNIQUE,
  CONSTRAINT UQ_NAME UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS events (
 id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
 title VARCHAR(2000) NOT NULL,
 annotation VARCHAR(2000) NOT NULL,
 category_id BIGINT NOT NULL,
 confirmed_requests BIGINT,
 created_on TIMESTAMP NOT NULL,
 description VARCHAR(4000),
 event_date TIMESTAMP NOT NULL,
 initiator_id BIGINT NOT NULL,
 paid BOOLEAN,
 participant_limit INT,
 published_on TIMESTAMP,
 request_moderation BOOLEAN,
 state ENUM ('PENDING', 'PUBLISHED', 'CANCELED'),
 views BIGINT,
 loc_lat float4 NOT NULL,
 loc_lon float4 NOT NULL,
 rating BIGINT,
 CONSTRAINT FK_EVENT_ON_INITIATOR
     FOREIGN KEY (initiator_id) REFERENCES users (id) ON DELETE CASCADE,
 CONSTRAINT FK_EVENT_ON_CATEGORY FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS requests (
  id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  created TIMESTAMP NOT NULL,
  event_id BIGINT NOT NULL,
  requester_id BIGINT NOT NULL,
  status ENUM ('PENDING', 'CONFIRMED', 'REJECTED', 'CANCELED'),
  CONSTRAINT FK_REQUEST_ON_REQUESTER FOREIGN KEY (requester_id) REFERENCES users (id) ON DELETE CASCADE,
  CONSTRAINT FK_REQUEST_ON_EVENT FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS compilations (
    id BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(2000) NOT NULL,
    pinned BOOLEAN
);

CREATE TABLE IF NOT EXISTS events_in_compilations (
    event_id BIGINT NOT NULL,
    compilation_id BIGINT NOT NULL,
    CONSTRAINT pk_events_in_compilations PRIMARY KEY (event_id, compilation_id),
    CONSTRAINT FK_events_in_compilations_to_events
        FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE,
    CONSTRAINT FK_events_in_compilations_to_compilations
        FOREIGN KEY (compilation_id) REFERENCES compilations (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS feedbacks (
    user_id BIGINT NOT NULL,
    event_id BIGINT NOT NULL,
    is_like BOOLEAN NOT NULL,
    CONSTRAINT pk_feedbacks PRIMARY KEY (user_id, event_id),
    CONSTRAINT FK_feedbacks_to_users
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT FK_feedbacks_to_events
        FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE
);